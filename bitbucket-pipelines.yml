pipelines:
  default:
    - step:
        name: Build local image for testing
        services:
          - docker
        caches:
          # Bitbucket sets cache for 7 days, but invalidating cache once set
          # does not seem possible. Fine, we'll just waste bandwidth by caching
          # from registry instead.
          - docker # docker layer caching from Bitbucket cache
        script:
          - docker image ls
          - docker pull $DOCKER_HUB_USER/atlas-web:ci-local-build-stage || true
          - docker pull $DOCKER_HUB_USER/atlas-web:ci-local || true
          - docker image ls
            # Bitbucket pipelines do not support BuildKit, so `make django`
            # which builds blazingly fast locally /w BuildKit does not work in CI.
            # So instead we just build the good ol' slow way (native Docker build).
          - >-
            docker build \
              --target local-build-stage \
              --cache-from $DOCKER_HUB_USER/atlas-web:ci-local-build-stage \
              -f compose/local/django/Dockerfile \
              -t $DOCKER_HUB_USER/atlas-web:ci-local-build-stage .
          - >-
            docker build \
              --cache-from $DOCKER_HUB_USER/atlas-web:ci-local-build-stage \
              --cache-from $DOCKER_HUB_USER/atlas-web:ci-local \
              -f compose/local/django/Dockerfile \
              -t $DOCKER_HUB_USER/atlas-web:ci-local .
          - docker image ls
          # Push to registry such that the next build can pull the cache in
          # to still build blazingly fast against valid layer cache (assuming it is,
          # i.e. onlyif the underlying python:3.8-slim-buster image wasn't updated
          # and no Python packages were added to requirements/*.txt)
          - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_ACCESS_TOKEN_TLRH314
          - docker push $DOCKER_HUB_USER/atlas-web:ci-local-build-stage
          - docker push $DOCKER_HUB_USER/atlas-web:ci-local
          - docker save -o atlas-web:ci-local.docker $DOCKER_HUB_USER/atlas-web:ci-local
        artifacts:
          # Save the latest image as an artifact to load in the test step to prevent
          # having to download it from registry there (to save some bandwidth).
          - atlas-web:ci-local.docker
    - step:
        name: Test the latest local build
        services:
          - docker
          - postgres
        script:
          # We saved the latest build in the previous step, so now load it.
          - docker load --input atlas-web:ci-local.docker
          - docker image ls
          - >-
            docker run --rm --entrypoint="" \
              --env-file '.envs/.local/.django' \
              --env-file '.envs/.local/.postgres' \
              --add-host postgres:$BITBUCKET_DOCKER_HOST_INTERNAL \
              -v"$BITBUCKET_CLONE_DIR:/app" \
              $DOCKER_HUB_USER/atlas-web:ci-local \
              bash -c 'coverage run -m pytest && coverage html && coverage report'
  branches:
    master:
      - step:
          name: Release
          # This step no longer needs the code in the repository as it's just Docker + registry
          clone:
            enabled: false
          services:
            - docker
          script:
            - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_ACCESS_TOKEN_TLRH314


definitions:
  services:
    postgres:
      image: postgres:12.3
      variables:
        POSTGRES_DB: 'atlas_web'
        POSTGRES_USER: 'debug'
        POSTGRES_PASSWORD: 'debug'
