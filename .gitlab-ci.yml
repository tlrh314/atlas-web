# Here we set up GitLab CI/CD to
# 1. run the test suite for commits to all branches
# 2. automatically update the website for updates on the master branch
# Please see the Wiki article for all the details about the setup.
# https://gitlab.gwdg.de/SOLVe/atlas-web/-/wikis/Deployment/Pipelines

default:
  image: docker:latest

variables:
  DOCKER_TLS_CERTDIR: "/certs"

  TEST_IMAGE: $CI_REGISTRY_IMAGE:local-$CI_BUILD_REF_SLUG
  BUILD_CACHE: $CI_REGISTRY_IMAGE:local-build-stage-$CI_BUILD_REF_SLUG
  BUILD_IMAGE: $CI_REGISTRY_IMAGE:$CI_BUILD_REF_SLUG
  RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest


before_script:
  # See https://gitlab.gwdg.de/help/ci/ssh_keys/README.md
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y ) > /dev/null 2>&1'
  - eval $(ssh-agent -s)
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  # Settings > CI/CD > Variables > type is 'Variable'
  - echo "$PROTOTYPE_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - echo "$PROTOTYPE_SSH_PUBLIC_KEY" | tr -d '\r' >> ~/.ssh/id_rsa.pub
  - (ssh-keyscan -t rsa ${PROTOTYPE_IP} >> ~/.ssh/known_hosts) > /dev/null 2>&1

stages:
   - test
   - pages
   - deploy

# Testing in CI can done /w Docker executor non-privileged (i.e. w/o dind)
# running the python:3.8-slim-buster image. We then test against an sqlite3 database 
# and assume for all practical purposes Django's ORM handles differences between the 
# database backend internally. In principle there could be edge cases due to underlying
# differences, but none such problems are to be expected for the atlas-web project.
#     Note that Pip's cache doesn't store the python packages, so we install those inside
# a virtualenv such that we're able to also cache that for faster execution of the test stage
test_in_venv:
  stage: test
  image: python:3.8-slim-buster
  tags:
    - GWDG-Runner-2
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    DATABASE_URL: 'sqlite:///test.db'
    CELERY_BROKER_URL: 'redis://redis:6379/0'
  cache:
    paths:
      - .cache/pip
      - venv/
  before_script:
    # Install venv for cache reasons
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    # Not using postgres, so we don't install the sys binaries. Do not want to
    # install psycopg2 through pip (and can't without sys binaries).
    - sed -i.bak -e "s/psycopg2=.*/# psycopg2/g" requirements/local.txt
    - time (pip install --use-feature=2020-resolver -r requirements/local.txt > /dev/null 2>&1) 
    # Tell the database connection string to use sqlite3 rather than postgres
    - sed -i.bak -e "s/DATABASE_URL=.*/DATABASE_URL=sqlite:\/\/\/test.db/g" .envs/.local/.django
    # Setup the Django application
    - python manage.py migrate
    - python manage.py collectstatic --noinput
    # Uncomment the lines below of Django's Translation framework would be used
  # - apt-get update -y && apt-get install -y gettext
  # - python manage.py compilemessages --ignore venv
  script:
    - pytest -n 4 --cov
    - coverage html
    - coverage report
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  artifacts:
    paths:
      - htmlcov
    expire_in: 60 minutes

pages:
  stage: pages
  tags:
    - GWDG-Runner-2
  dependencies:
    - test_in_venv
  script:
    - mv htmlcov/ public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master

# Deploy builds the latest production image at the production server,
# and then stop+rm the Django+Celery containers and restarts Django+Celery. Note
# that we assume that Traefik, Postgres, and Redis need not be restarted.
# 
deploy:
  stage: deploy
  tags:
    - GWDG-Runner-2
  variables:
    GIT_STRATEGY: none
  script:
    - ssh ${PROTOTYPE_USER}@${PROTOTYPE_IP} -p22
      -o preferredAuthentications=publickey -i  ~/.ssh/id_rsa.pub
      "cd atlas-web && git pull && make production-restart"
  environment:
    name: prototype
    url: https://atlas.halbesma.com
  only:
  - master
