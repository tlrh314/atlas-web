import pytest

from atlas_web.users.models import User

pytestmark = pytest.mark.django_db


def test_factory(user: User):
    assert user.first_name[0:6] == "Test: "


def test_manager_create_superuser_creates_an_active_validated_staff_superuser():
    """  Sanity check for managers.py """
    superuser = User.objects.create_superuser(
        email="cernetic@mpa-garching.mpg.de",
        first_name="Miha",
        last_name="Cernetic",
        password="secret",
    )

    assert superuser.is_active
    assert superuser.is_validated
    assert superuser.is_staff
    assert superuser.is_superuser


def test_manager_create_user_creates_an_active_nonvalidated_nonstaff_nonsuperuser():
    """
    Note that User.objects.create_user is defined in managers.py, which does set
    the user.is_active flag to True. This is in contrast to the default of the model,
    where the flag is set to False.
    """

    user = User.objects.create_user(
        email="cernetic@mpa-garching.mpg.de",
        first_name="Miha",
        last_name="Cernetic",
        password="secret",
    )
    assert user.is_active
    assert not user.is_staff
    assert not user.is_validated
    assert not user.is_superuser


def test_factory_create_user_creates_an_inactive_nonvalidated_nonstaff_nonsuperuser(
    user: User,
):
    """
    Note that user now is generated by the UserFactory through the conftest.py,
    which does not specify the value of is_active. The model default is_active=False
    is thus used for this user.
    """

    assert not user.is_active
    assert not user.is_staff
    assert not user.is_validated
    assert not user.is_superuser


def test_user_get_absolute_url(user: User):
    """
    Check for get_absolute_url in models.py. This get_absolute_url function enables, among other things,
    the button in the admin that allows you to visit the user's profile page if you look at the detail view
    of one specific user instance.
    """
    assert user.get_absolute_url() == f"/users/detail/{user.id}/"
